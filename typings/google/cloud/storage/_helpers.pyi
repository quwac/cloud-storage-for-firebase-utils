"""
This type stub file was generated by pyright.
"""

"""Helper functions for Cloud Storage utility classes.

These are *not* part of the API.
"""


from typing import Any, Optional, Tuple, Union

from google.cloud.storage.client import Client

STORAGE_EMULATOR_ENV_VAR = "STORAGE_EMULATOR_HOST"
_DEFAULT_STORAGE_HOST = u"https://storage.googleapis.com"
_GENERATION_MATCH_PARAMETERS = (("if_generation_match", "ifGenerationMatch"), ("if_generation_not_match", "ifGenerationNotMatch"), ("if_metageneration_match", "ifMetagenerationMatch"), ("if_metageneration_not_match", "ifMetagenerationNotMatch"), ("if_source_generation_match", "ifSourceGenerationMatch"), ("if_source_generation_not_match", "ifSourceGenerationNotMatch"), ("if_source_metageneration_match", "ifSourceMetagenerationMatch"), ("if_source_metageneration_not_match", "ifSourceMetagenerationNotMatch"))


class _PropertyMixin(object):
    """Abstract mixin for cloud storage classes with associated properties.

    Non-abstract subclasses should implement:
      - path
      - client
      - user_project

    :type name: str
    :param name: The name of the object. Bucket names must start and end with a
                 number or letter.
    """

    def __init__(self, name=...) -> None:
        ...

    @property
    def path(self):
        """Abstract getter for the object path."""
        ...

    @property
    def client(self):
        """Abstract getter for the object client."""
        ...

    @property
    def user_project(self):
        """Abstract getter for the object user_project."""
        ...

    def reload(self, client=..., projection=..., timeout=..., if_generation_match=..., if_generation_not_match=..., if_metageneration_match=..., if_metageneration_not_match=..., retry=...):
        """Reload properties from Cloud Storage.

        If :attr:`user_project` is set, bills the API request to that project.

        :type client: :class:`~google.cloud.storage.client.Client` or
                      ``NoneType``
        :param client: the client to use. If not passed, falls back to the
                       ``client`` stored on the current object.

        :type projection: str
        :param projection: (Optional) If used, must be 'full' or 'noAcl'.
                           Defaults to ``'noAcl'``. Specifies the set of
                           properties to return.

        :type timeout: float or tuple
        :param timeout: (Optional) The amount of time, in seconds, to wait
            for the server response.

            Can also be passed as a tuple (connect_timeout, read_timeout).
            See :meth:`requests.Session.request` documentation for details.

        :type if_generation_match: long
        :param if_generation_match: (Optional) Make the operation conditional on whether
                                    the blob's current generation matches the given value.
                                    Setting to 0 makes the operation succeed only if there
                                    are no live versions of the blob.

        :type if_generation_not_match: long
        :param if_generation_not_match: (Optional) Make the operation conditional on whether
                                        the blob's current generation does not match the given
                                        value. If no live blob exists, the precondition fails.
                                        Setting to 0 makes the operation succeed only if there
                                        is a live version of the blob.

        :type if_metageneration_match: long
        :param if_metageneration_match: (Optional) Make the operation conditional on whether the
                                        blob's current metageneration matches the given value.

        :type if_metageneration_not_match: long
        :param if_metageneration_not_match: (Optional) Make the operation conditional on whether the
                                            blob's current metageneration does not match the given value.

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry: (Optional) How to retry the RPC. A None value will disable retries.
            A google.api_core.retry.Retry value will enable retries, and the object will
            define retriable response codes and errors and configure backoff and timeout options.

            A google.cloud.storage.retry.ConditionalRetryPolicy value wraps a Retry object and
            activates it only if certain conditions are met. This class exists to provide safe defaults
            for RPC calls that are not technically safe to retry normally (due to potential data
            duplication or other side-effects) but become safe to retry if a condition such as
            if_metageneration_match is set.

            See the retry.py source code and docstrings in this package (google.cloud.storage.retry) for
            information on retry types and how to configure them.
        """
        ...

    def patch(
            self,
            client: Optional[Client] = ...,
            timeout: Union[float, Tuple[float, float]] = ...,
            if_generation_match: Optional[int] = ...,
            if_generation_not_match: Optional[int] = ...,
            if_metageneration_match: Optional[int] = ...,
            if_metageneration_not_match: Optional[int] = ...,
            retry: Any = ...) -> None:
        """Sends all changed properties in a PATCH request.

        Updates the ``_properties`` with the response from the backend.

        If :attr:`user_project` is set, bills the API request to that project.

        :type client: :class:`~google.cloud.storage.client.Client` or
                      ``NoneType``
        :param client: the client to use. If not passed, falls back to the
                       ``client`` stored on the current object.

        :type timeout: float or tuple
        :param timeout: (Optional) The amount of time, in seconds, to wait
            for the server response.

            Can also be passed as a tuple (connect_timeout, read_timeout).
            See :meth:`requests.Session.request` documentation for details.

        :type if_generation_match: long
        :param if_generation_match: (Optional) Make the operation conditional on whether
                                    the blob's current generation matches the given value.
                                    Setting to 0 makes the operation succeed only if there
                                    are no live versions of the blob.

        :type if_generation_not_match: long
        :param if_generation_not_match: (Optional) Make the operation conditional on whether
                                        the blob's current generation does not match the given
                                        value. If no live blob exists, the precondition fails.
                                        Setting to 0 makes the operation succeed only if there
                                        is a live version of the blob.

        :type if_metageneration_match: long
        :param if_metageneration_match: (Optional) Make the operation conditional on whether the
                                        blob's current metageneration matches the given value.

        :type if_metageneration_not_match: long
        :param if_metageneration_not_match: (Optional) Make the operation conditional on whether the
                                            blob's current metageneration does not match the given value.

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry: (Optional) How to retry the RPC. A None value will disable retries.
            A google.api_core.retry.Retry value will enable retries, and the object will
            define retriable response codes and errors and configure backoff and timeout options.

            A google.cloud.storage.retry.ConditionalRetryPolicy value wraps a Retry object and
            activates it only if certain conditions are met. This class exists to provide safe defaults
            for RPC calls that are not technically safe to retry normally (due to potential data
            duplication or other side-effects) but become safe to retry if a condition such as
            if_metageneration_match is set.

            See the retry.py source code and docstrings in this package (google.cloud.storage.retry) for
            information on retry types and how to configure them.
        """
        ...

    def update(self, client=..., timeout=..., if_generation_match=..., if_generation_not_match=..., if_metageneration_match=..., if_metageneration_not_match=..., retry=...):
        """Sends all properties in a PUT request.

        Updates the ``_properties`` with the response from the backend.

        If :attr:`user_project` is set, bills the API request to that project.

        :type client: :class:`~google.cloud.storage.client.Client` or
                      ``NoneType``
        :param client: the client to use. If not passed, falls back to the
                       ``client`` stored on the current object.

        :type timeout: float or tuple
        :param timeout: (Optional) The amount of time, in seconds, to wait
            for the server response.

            Can also be passed as a tuple (connect_timeout, read_timeout).
            See :meth:`requests.Session.request` documentation for details.

        :type if_generation_match: long
        :param if_generation_match: (Optional) Make the operation conditional on whether
                                    the blob's current generation matches the given value.
                                    Setting to 0 makes the operation succeed only if there
                                    are no live versions of the blob.

        :type if_generation_not_match: long
        :param if_generation_not_match: (Optional) Make the operation conditional on whether
                                        the blob's current generation does not match the given
                                        value. If no live blob exists, the precondition fails.
                                        Setting to 0 makes the operation succeed only if there
                                        is a live version of the blob.

        :type if_metageneration_match: long
        :param if_metageneration_match: (Optional) Make the operation conditional on whether the
                                        blob's current metageneration matches the given value.

        :type if_metageneration_not_match: long
        :param if_metageneration_not_match: (Optional) Make the operation conditional on whether the
                                            blob's current metageneration does not match the given value.

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry: (Optional) How to retry the RPC. A None value will disable retries.
            A google.api_core.retry.Retry value will enable retries, and the object will
            define retriable response codes and errors and configure backoff and timeout options.

            A google.cloud.storage.retry.ConditionalRetryPolicy value wraps a Retry object and
            activates it only if certain conditions are met. This class exists to provide safe defaults
            for RPC calls that are not technically safe to retry normally (due to potential data
            duplication or other side-effects) but become safe to retry if a condition such as
            if_metageneration_match is set.

            See the retry.py source code and docstrings in this package (google.cloud.storage.retry) for
            information on retry types and how to configure them.
        """
        ...
