"""
This type stub file was generated by pyright.
"""

import collections
import enum

"""Docstring parsing module for Python Fire.

The following features of docstrings are not supported.
TODO(dbieber): Support these features.
- numpy docstrings may begin with the function signature.
- whitespace may be important for proper structuring of a docstring
- I've seen `argname` (with single backticks) as a style of documenting
  arguments. The `argname` appears on one line, and the description on the next.
- .. Sphinx directives such as .. note:: are not understood.
- After a section ends, future contents may be included in the section. E.g.
  :returns: This is what is returned.
  Example: An example goes here.
- @param is sometimes used.  E.g.
  @param argname (type) Description
  @return (type) Description
- The true signature of a function is not used by the docstring parser. It could
  be useful for determining whether something is a section header or an argument
  for example.
- This example confuses types as part of the docstrings.
  Parameters
  argname : argtype
  Arg description
- If there's no blank line after the summary, the description will be slurped
  up into the summary.
- "Examples" should be its own section type. aka "Usage".
- "Notes" should be a section type.
- Some people put parenthesis around their types in RST format, e.g.
  :param (type) paramname:
- :rtype: directive (return type)
- Also ":rtype str" with no closing ":" has come up.
- Return types are not supported.
- "# Returns" as a section title style
- ":raises ExceptionType: Description" ignores the ExceptionType currently.
- "Defaults to X" occurs sometimes.
- "True | False" indicates bool type.
"""
class DocstringInfo(collections.namedtuple('DocstringInfo', ('summary', 'description', 'args', 'returns', 'yields', 'raises'))):
  ...


class ArgInfo(collections.namedtuple('ArgInfo', ('name', 'type', 'description'))):
  ...


class Namespace(dict):
  """A dict with attribute (dot-notation) access enabled."""
  def __getattr__(self, key):
    ...
  
  def __setattr__(self, key, value):
    ...
  
  def __delattr__(self, key):
    ...
  


class Sections(enum.Enum):
  ARGS = ...
  RETURNS = ...
  YIELDS = ...
  RAISES = ...
  TYPE = ...


class Formats(enum.Enum):
  GOOGLE = ...
  NUMPY = ...
  RST = ...


SECTION_TITLES = { Sections.ARGS: ('argument', 'arg', 'parameter', 'param'),Sections.RETURNS: ('return', ),Sections.YIELDS: ('yield', ),Sections.RAISES: ('raise', 'except', 'exception', 'throw', 'error', 'warn'),Sections.TYPE: ('type', ) }
def parse(docstring):
  """Returns DocstringInfo about the given docstring.

  This parser aims to parse Google, numpy, and rst formatted docstrings. These
  are the three most common docstring styles at the time of this writing.

  This parser aims to be permissive, working even when the docstring deviates
  from the strict recommendations of these styles.

  This parser does not aim to fully extract all structured information from a
  docstring, since there are simply too many ways to structure information in a
  docstring. Sometimes content will remain as unstructured text and simply gets
  included in the description.

  The Google docstring style guide is available at:
  https://github.com/google/styleguide/blob/gh-pages/pyguide.md

  The numpy docstring style guide is available at:
  https://numpydoc.readthedocs.io/en/latest/format.html

  Information about the rST docstring format is available at:
  https://www.python.org/dev/peps/pep-0287/
  The full set of directives such as param and type for rST docstrings are at:
  http://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html

  Note: This function does not claim to handle all docstrings well. A list of
  limitations is available at the top of the file. It does aim to run without
  crashing in O(n) time on all strings on length n. If you find a string that
  causes this to crash or run unacceptably slowly, please consider submitting
  a pull request.

  Args:
    docstring: The docstring to parse.

  Returns:
    A DocstringInfo containing information about the docstring.
  """
  ...

