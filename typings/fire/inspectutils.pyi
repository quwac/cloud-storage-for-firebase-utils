"""
This type stub file was generated by pyright.
"""

"""Inspection utility functions for Python Fire."""
class FullArgSpec(object):
  """The arguments of a function, as in Python 3's inspect.FullArgSpec."""
  def __init__(self, args=..., varargs=..., varkw=..., defaults=..., kwonlyargs=..., kwonlydefaults=..., annotations=...) -> None:
    """Constructs a FullArgSpec with each provided attribute, or the default.

    Args:
      args: A list of the argument names accepted by the function.
      varargs: The name of the *varargs argument or None if there isn't one.
      varkw: The name of the **kwargs argument or None if there isn't one.
      defaults: A tuple of the defaults for the arguments that accept defaults.
      kwonlyargs: A list of argument names that must be passed with a keyword.
      kwonlydefaults: A dictionary of keyword only arguments and their defaults.
      annotations: A dictionary of arguments and their annotated types.
    """
    ...
  


def Py2GetArgSpec(fn):
  """A wrapper around getargspec that tries both fn and fn.__call__."""
  ...

def Py3GetFullArgSpec(fn):
  """A alternative to the builtin getfullargspec.

  The builtin inspect.getfullargspec uses:
  `skip_bound_args=False, follow_wrapped_chains=False`
  in order to be backwards compatible.

  This function instead skips bound args (self) and follows wrapped chains.

  Args:
    fn: The function or class of interest.
  Returns:
    An inspect.FullArgSpec namedtuple with the full arg spec of the function.
  """
  ...

def GetFullArgSpec(fn):
  """Returns a FullArgSpec describing the given callable."""
  ...

def GetFileAndLine(component):
  """Returns the filename and line number of component.

  Args:
    component: A component to find the source information for, usually a class
        or routine.
  Returns:
    filename: The name of the file where component is defined.
    lineno: The line number where component is defined.
  """
  ...

def Info(component):
  """Returns a dict with information about the given component.

  The dict will have at least some of the following fields.
    type_name: The type of `component`.
    string_form: A string representation of `component`.
    file: The file in which `component` is defined.
    line: The line number at which `component` is defined.
    docstring: The docstring of `component`.
    init_docstring: The init docstring of `component`.
    class_docstring: The class docstring of `component`.
    call_docstring: The call docstring of `component`.
    length: The length of `component`.

  Args:
    component: The component to analyze.
  Returns:
    A dict with information about the component.
  """
  ...

def IsNamedTuple(component):
  """Return true if the component is a namedtuple.

  Unfortunately, Python offers no native way to check for a namedtuple type.
  Instead, we need to use a simple hack which should suffice for our case.
  namedtuples are internally implemented as tuples, therefore we need to:
    1. Check if the component is an instance of tuple.
    2. Check if the component has a _fields attribute which regular tuples do
       not have.

  Args:
    component: The component to analyze.
  Returns:
    True if the component is a namedtuple or False otherwise.
  """
  ...

def GetClassAttrsDict(component):
  """Gets the attributes of the component class, as a dict with name keys."""
  ...

